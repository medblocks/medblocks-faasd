version: "3.7"
services:
  basic-auth-plugin:
    image: ghcr.io/openfaas/basic-auth:0.20.5
    environment:
      - port=8080
      - secret_mount_path=/run/secrets
      - user_filename=basic-auth-user
      - pass_filename=basic-auth-password
    volumes:
      # we assume cwd == /var/lib/faasd
      - type: bind
        source: ./secrets/basic-auth-password
        target: /run/secrets/basic-auth-password
      - type: bind
        source: ./secrets/basic-auth-user
        target: /run/secrets/basic-auth-user
    cap_add:
      - CAP_NET_RAW

  nats:
    image: docker.io/library/nats-streaming:0.11.2
    command:
      - "/nats-streaming-server"
      - "-m"
      - "8222"
      - "--store=memory"
      - "--cluster_id=faas-cluster"
    # ports:
    #    - "127.0.0.1:8222:8222"

  prometheus:
    image: docker.io/prom/prometheus:v2.14.0
    volumes:
      - type: bind
        source: ./prometheus.yml
        target: /etc/prometheus/prometheus.yml
    cap_add:
      - CAP_NET_RAW
    ports:
       - "127.0.0.1:9090:9090"

  gateway:
    image: ghcr.io/openfaas/gateway:0.20.11
    environment:
      - basic_auth=true
      - functions_provider_url=http://faasd-provider:8081/
      - direct_functions=false
      - read_timeout=60s
      - write_timeout=60s
      - upstream_timeout=65s
      - faas_nats_address=nats
      - faas_nats_port=4222
      - auth_proxy_url=http://basic-auth-plugin:8080/validate
      - auth_proxy_pass_body=false
      - secret_mount_path=/run/secrets
      - scale_from_zero=true
      - function_namespace=openfaas-fn
    volumes:
      # we assume cwd == /var/lib/faasd
      - type: bind
        source: ./secrets/basic-auth-password
        target: /run/secrets/basic-auth-password
      - type: bind
        source: ./secrets/basic-auth-user
        target: /run/secrets/basic-auth-user
    cap_add:
      - CAP_NET_RAW
    depends_on:
      - basic-auth-plugin
      - nats
      - prometheus
    ports:
       - "8080:8080"

  queue-worker:
    image: docker.io/openfaas/queue-worker:0.11.2
    environment:
      - faas_nats_address=nats
      - faas_nats_port=4222
      - gateway_invoke=true
      - faas_gateway_address=gateway
      - ack_wait=5m5s
      - max_inflight=1
      - write_debug=false
      - basic_auth=true
      - secret_mount_path=/run/secrets
    volumes:
      # we assume cwd == /var/lib/faasd
      - type: bind
        source: ./secrets/basic-auth-password
        target: /run/secrets/basic-auth-password
      - type: bind
        source: ./secrets/basic-auth-user
        target: /run/secrets/basic-auth-user
    cap_add:
      - CAP_NET_RAW
    depends_on:
      - nats

  # Medblocks Containers
  fhir:
    image: "tornadoalert/fhir:v5.4.1-nats"
    environment:
      spring.datasource.url: "jdbc:postgresql://db:5432/hapi"
      spring.datasource.username: hapi
      spring.datasource.password: hapi
      spring.datasource.driverClassName: org.postgresql.Driver
      hapi.fhir.subscription.resthook_enabled: "true"
      hapi.fhir.subscription.websocket_enabled: "true"
      hapi.fhir.client_id_strategy: ANY
      hapi.fhir.nats: "nats://nats:4222"
    depends_on: 
      - db
  openehr:
    image: "ehrbase/ehrbase:0.16.5"
    environment:
      SPRING_DATASOURCE_URL: "jdbc:postgresql://db:5432/ehrbase"
      SPRING_DATASOURCE_USERNAME: ehrbase
      SPRING_DATASOURCE_PASSWORD: ehrbase
      SERVER_AQLCONFIG_USEJSQUERY: "false"
      SERVER_NODENAME: "localhost"
    depends_on:
      - db
  
  db:
    # Must initialize on runtime
    image: postgres
    command: 
      - -c
      - max_replication_slots=10
      - -c
      - wal_level=logical
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./postgres.conf:/etc/postgresql/postgresql.conf
    environment:
      POSTGRES_PASSWORD: admin
      POSTGRES_USER: admin
      POSTGRES_DB: hapi_r4
  # Listens to db for openEHR event stream
  wal-listner:
    entrypoint:
      - "./wal-listener"
      - "-c" 
      - "/app/config.yml"
    image: theaxer/wal-listener:v1.2.0-5-g66dbbab
    volumes:
        # TO CHANGE
        - ./config.yml:/app/config.yml
    depends_on: 
      - db
      - nats
#   caddy:
#     image: caddy:2.4.1
#     ports:
#       - "80:80"
#       - "8080:8080"
#     volumes:
#       - ./Caddyfile:/etc/caddy/Caddyfile
#       - caddy_data:/data
#       - caddy_config:/config
  
#   medblocks-dashboard:
#     # NodeJS/Django?
#     environment:
#       FHIR_URL:
#       OPENEHR_URL:
#       OPENFAAS_URL:
#       CADDY_URL:
#       DATABASE_URL:
#       DATABASE_USERNAME:
#       DATABASE_PASSWORD:

volumes: 
    db-data: